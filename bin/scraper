#!/usr/bin/env ruby
# frozen_string_literal: true

# Main class for scrapping https://www.coldwellbankerhomes.com.
#
# For any state or states must be total scraped 20 000 or more products.
#
# Author::    Alexander Petrov mailto:alex.petrofan@gmail.com
# Link::      https://www.linkedin.com/in/alex-petrov/
class Scraper
  require 'curb'
  require 'nokogiri'
  require 'csv'
  require_relative '../lib/scraper_utils'
  require_relative '../lib/scraper_csv_utils'

  def call
    $stdout.puts '== Scraping... =='
    scrape_data
  end

  private

  # NOTE: Now its scrap All states, 1 Region, 1 page of products from region
  #
  # TODO: Single thread scraping.
  # scrape_states.each do |state|
  #   scrape_regions(state).each { |reg| scrape_region_products(state, reg) }
  # end
  def scrape_data
    state  = scrape_states&.first
    region = scrape_regions(state)[1]

    scrape_region_products(state, region)
  end

  def scrape_states
    states = ScraperUtils.scrape_links_page(
      'states',
      "#{ScraperUtils::BASE_URL}/sitemap/real-estate/",
      'table.table-sort a'
    )

    $stdout.puts "  -- Scraped total #{states.count} states --"
    ScraperUtils.print_name_link(states)

    ScraperCsvUtils.export_to_csv('1_states', states)

    states
  end

  def scrape_regions(state)
    regions = ScraperUtils.scrape_links_page("state `#{state[:name]}`",
                                             state[:url],
                                             'table.table-sort a')

    $stdout.puts "  -- Scraped total #{regions.count} regions --"
    ScraperUtils.print_name_link(regions)

    ScraperCsvUtils.export_to_csv("2_#{state[:name]}_regions", regions)

    regions
  end

  # TODO: Refactor to fix RuboCop `Metrics/MethodLength` offense.
  def scrape_region_products(state, region)
    products = ScraperUtils.scrape_links_page(
      "region `#{region[:name]}`",
      region[:url],
      'div#searchList div.prop-info div.address a',
      '.street-address'
    )

    $stdout.puts "  -- Scraped total #{products.count} products --"
    ScraperUtils.print_name_link(products)

    ScraperCsvUtils.export_to_csv(
      "3_#{state[:name]}_#{region[:name]}_products", products
    )

    products
  end

  # TODO: Add implementation, `url` param.
  def scrape_product; end
end

Scraper.new.call
